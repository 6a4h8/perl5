#!./perl

# We suppose that perl _mostly_ works at this moment, so may use
# sophisticated testing.

BEGIN {
    chdir 't' if -d 't';
    @INC = '../lib';              # pick up only this build's lib
    $ENV{PERL5LIB} = '../lib';    # so children will see it too
}

my $torture; # torture testing?

use Test::Harness;
use strict;

$Test::Harness::switches = "";    # Too much noise otherwise
$Test::Harness::Verbose++ while @ARGV && $ARGV[0] eq '-v' && shift;

if ($ARGV[0] && $ARGV[0] eq '-torture') {
    shift;
    $torture = 1;
}

# Let tests know they're running in the perl core.  Useful for modules
# which live dual lives on CPAN.
$ENV{PERL_CORE} = 1;

#fudge DATA for now.
my %datahandle = qw(
		lib/bigint.t		1
		lib/bigintpm.t		1
		lib/bigfloat.t	 	1
		lib/bigfloatpm.t	1
		op/gv.t			1
		lib/complex.t		1
		lib/ph.t		1
		lib/soundex.t		1
		op/misc.t		1
		op/runlevel.t		1
		op/tie.t		1
		op/lex_assign.t		1
		);

foreach (keys %datahandle) {
     unlink "$_.t";
}

my (@tests, $rules, $re);

# [.VMS]TEST.COM calls harness with empty arguments, so clean-up @ARGV
@ARGV = grep $_ && length( $_ ) => @ARGV;

sub _populate_hash {
    return map {$_, 1} split /\s+/, $_[0];
}

# Generate T::H schedule rules that run the contents of each directory
# sequentially.
sub _seq_dir_rules {
    my @tests = @_;
    my %dir;
    for (@tests) {
        s{[^/]+$}{\*};
        $dir{$_}++;
    }

    return { par => [ map { { seq => $_ } } sort keys %dir ] };
}

sub _extract_tests;
sub _extract_tests {
    # This can probably be done more tersely with a map, but I doubt that it
    # would be as clear
    my @results;
    foreach (@_) {
	my $ref = ref $_;
	if ($ref) {
	    if ($ref eq 'ARRAY') {
		push @results, _extract_tests @$_;
	    } elsif ($ref eq 'HASH') {
		push @results, _extract_tests values %$_;
	    } else {
		die "Unknown reference type $ref";
	    }
	} else {
	    push @results, glob $_;
	}
    }
    @results;
}

if ($ARGV[0] && $ARGV[0]=~/^-re/) {
    if ($ARGV[0]!~/=/) {
        shift;
        $re=join "|",@ARGV;
        @ARGV=();
    } else {
        (undef,$re)=split/=/,shift;
    }
}

if (@ARGV) {
    if ($^O eq 'MSWin32') {
	@tests = map(glob($_),@ARGV);
    }
    else {
	@tests = @ARGV;
    }
} else {
    # Ideally we'd get somewhere close to Tux's Oslo rules
    # my $rules = {
    #     par => [
    #         { seq => '../ext/DB_File/t/*' },
    #         { seq => '../ext/IO_Compress_Zlib/t/*' },
    #         { seq => '../lib/CPANPLUS/*' },
    #         { seq => '../lib/ExtUtils/t/*' },
    #         '*'
    #     ]
    # };

    # but for now, run all directories in sequence. In particular, it would be
    # nice to get the tests in t/op/*.t able to run in parallel.

    unless (@tests) {
	my @seq;
	push @seq, <base/*.t>;

	my @next = qw(comp cmd run io op uni mro lib);
	push @next, 'japh' if $torture;
	push @next, 'win32' if $^O eq 'MSWin32';
	push @seq, { par => [
			     map { "$_/*.t" } @next
			    ] };

	my @last;
	use Config;
	my %skip;
	{
	    my %extensions = _populate_hash $Config{'extensions'};
	    my %known_extensions = _populate_hash $Config{'known_extensions'};
	    foreach (keys %known_extensions) {
		$skip{$_}++ unless $extensions{$_};
	    }
	}
	use File::Spec;
	my $updir = File::Spec->updir;
	my $mani  = File::Spec->catfile(File::Spec->updir, "MANIFEST");
	if (open(MANI, $mani)) {
	    my @manitests = ();
	    my $ext_pat = $^O eq 'MSWin32' ? '(?:win32/)?ext' : 'ext';
	    while (<MANI>) { # similar code in t/TEST
		if (m!^($ext_pat/(\S+)/+(?:[^/\s]+\.t|test\.pl)|lib/\S+?(?:\.t|test\.pl))\s!) {
		    my ($test, $extension) = ($1, $2);
		    if (defined $extension) {
			$extension =~ s!/t$!!;
			# XXX Do I want to warn that I'm skipping these?
			next if $skip{$extension};
		    }
		    push @manitests, File::Spec->catfile($updir, $test);
		}
	    }
	    close MANI;
	    # Sort the list of test files read from MANIFEST into a sensible
	    # order instead of using the order in which they are listed there
	    push @last, sort { lc $a cmp lc $b } @manitests;
	} else {
	    warn "$0: cannot open $mani: $!\n";
	}
	push @last, <Module_Pluggable/*.t>;
	push @last, <pod/*.t>;
	push @last, <x2p/*.t>;

	@tests = (_extract_tests (@seq), @last);

	push @seq, _seq_dir_rules @last;

	$rules = { seq => \@seq };

    }
}
if ($^O eq 'MSWin32') {
    s,\\,/,g for @tests;
}
@tests=grep /$re/, @tests 
    if $re;

my $jobs = $ENV{TEST_JOBS};
if ($jobs) {
    eval 'use TAP::Harness 3.13; 1' or die $@;
    my $h = TAP::Harness->new({ jobs => $jobs, rules => $rules});
    $h->runtests(@tests);
} else {
    Test::Harness::runtests @tests;
}
exit(0);
